name: CI

on:
  push:
  workflow_call:
    inputs:
      tagname:
        description: 'The git tag name for release'
        default: ''
        required: true
        type: string
  workflow_dispatch:

jobs:
  build_root:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [aarch64, riscv64]
        include:
          - arch: aarch64
            distro: alpine_latest
          - arch: riscv64
            distro: alpine_edge
    env:
      ROOT_TARGET: "target"

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Create a folder as the root taget path
        run: |
          mkdir ${{ env.ROOT_TARGET }}

      - name: Have ${{ matrix.arch }} environment
        uses: uraimo/run-on-arch-action@v2
        with:
          arch: ${{ matrix.arch }}
          distro: ${{ matrix.distro }}
          run: |
            uname -a
            ls -l
            sh bootstrap.sh ${{ env.ROOT_TARGET }}

      - name: Package the built root
        working-directory: ${{ env.ROOT_TARGET }}
        run: |
          sudo tar zcf ../rootfs-${{ matrix.arch }}.tar.gz *
          sudo chmod a+r ../rootfs-${{ matrix.arch }}.tar.gz

      - name: Upload compressed root file system
        uses: actions/upload-artifact@v3
        with:
          name: rootfs-${{ matrix.arch }}.tar.gz
          path: rootfs-${{ matrix.arch }}.tar.gz

  build_image:
    needs: build_root
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [aarch64, riscv64]
        platform: [qemu]
        include:
          - arch: aarch64
            platform: rpi
    env:
      DISK_IMG: "simple-alpine-${{ matrix.platform }}_${{ matrix.arch }}.img"
      ROOTFS_TARBALL: "rootfs-${{ matrix.arch }}.tar.gz"
      ROOT_TARGET: "target"
      KERNEL_TARBALL: "kernel-${{ matrix.arch }}.tar.gz"
      BOOT_TARGET: "target/boot"

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Create a raw disk image
        shell: bash
        run: |
          dd if=/dev/zero of=${{ env.DISK_IMG }} bs=8M count=32
          (echo "start=2048, size=100MiB, type=c, bootable"; echo "type=83") | sfdisk ${{ env.DISK_IMG }}

          # https://github.com/damianperera/mount-image-action/blob/v1/action.yml#L36
          kpartx="$(sudo kpartx -avs ${{ env.DISK_IMG }})" || echo 1>&2 "ERROR: could not create loop devices for image"
          echo $kpartx
          blockDevices=($(grep -o 'loop.p.' <<<"$kpartx"))
          sleep 0.5
          boot=/dev/mapper/${blockDevices[0]}
          root=/dev/mapper/${blockDevices[1]}

          echo "Boot: ${boot}"
          echo "Root: ${root}"

          sudo mkfs.vfat -v ${boot}
          sudo mkfs.ext4 ${root}

          mkdir ${{ env.ROOT_TARGET }}
          sudo mount -t ext4 ${root} ${{ env.ROOT_TARGET }}
          sudo mkdir ${{ env.BOOT_TARGET }}
          sudo mount -t vfat ${boot} ${{ env.BOOT_TARGET }}

      - name: Download the root file system tarball
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.ROOTFS_TARBALL }}

      - name: Deploy the root file system into the root partition
        working-directory: ${{ env.ROOT_TARGET }}
        run: |
          sudo tar zxf ../${{ env.ROOTFS_TARBALL }}

      - name: Customize for file system on MMC storage
        if: ${{ matrix.platform != 'qemu' }}
        working-directory: ${{ env.ROOT_TARGET }}
        run: |
          PATTERN="\/dev\/vda"
          REPLACE="\/dev\/mmcblk0p"
          sudo sed -i "s/$PATTERN/$REPLACE/g" etc/fstab

      - name: Customize console on Raspberry Pi
        if: ${{ matrix.platform == 'rpi' }}
        working-directory: ${{ env.ROOT_TARGET }}
        run: |
          PATTERN="::respawn:\/sbin\/getty 38400 tty[0-9]*"
          REPLACE="::respawn:\/bin\/login"
          sudo sed -i "s/$PATTERN/$REPLACE/g" etc/inittab

          PATTERN="ttyAMA0::respawn:\/sbin\/getty -L 0 ttyAMA0 vt100"
          REPLACE="ttyS1::respawn:\/sbin\/getty -L ttyS1 115200 vt100"
          sudo sed -i "s/$PATTERN/$REPLACE/g" etc/inittab

      - name: Checkout build-kernel
        if: ${{ !startsWith(env.KERNEL_VERSION, 'v') }}
        uses: actions/checkout@v3
        with:
          repository: starnight/build-kernel
          path: build-kernel

      - name: Get kernel version
        if: ${{ !startsWith(env.KERNEL_VERSION, 'v') }}
        working-directory: build-kernel
        run: |
          echo "KERNEL_VERSION=$(cat version)" >> $GITHUB_ENV

      - name: Download the kernel tarball
        env:
          KERNEL_URL: "https://github.com/starnight/build-kernel/releases/download/${{ env.KERNEL_VERSION }}/${{ env.KERNEL_TARBALL }}"
        run: |
          curl -L ${{ env.KERNEL_URL }} -o ${{ env.KERNEL_TARBALL }}

      - name: Deploy the kernel into the root file system
        if: ${{ matrix.platform == 'rpi' }}
        working-directory: ${{ env.ROOT_TARGET }}
        run: |
          sudo tar zxf ../${{ env.KERNEL_TARBALL }}
          sudo mkdir -p boot/upstream
          sudo mv boot/{config*,System.map*} boot/upstream/
          sudo mv boot/vmlinuz* boot/upstream/kernel8.img
          sudo mv boot/dtbs/*/broadcom/* boot/upstream/
          sudo rm -rf boot/dtbs

      - name: Download and deploy firmwares from Raspberry Pi
        if: ${{ matrix.platform == 'rpi' }}
        env:
          RPI_VERSION: "1.20230317"
        run: |
          RPI_URL="https://github.com/raspberrypi/firmware/archive/refs/tags/${{ env.RPI_VERSION }}.tar.gz"
          RPI_FIRWARE_TARGET=firmware-${{ env.RPI_VERSION }}

          curl -L ${RPI_URL} -o ${RPI_FIRWARE}.tar.gz
          tar zxf ${RPI_FIRWARE}.tar.gz
          rm -rf ${RPI_FIRWARE_TARGET}/boot/{overlays,*.dtb,kernel*}
          sudo cp ${RPI_FIRWARE_TARGET}/boot/* ${{ env.BOOT_TARGET }}/

          sudo cp data/rpi/* ${{ env.BOOT_TARGET }}/

      - name: Unmount image
        run: |
          ls -l ${{ env.ROOT_TARGET }}
          ls -l ${{ env.BOOT_TARGET }}
          sudo umount ${{ env.BOOT_TARGET }}
          sudo umount ${{ env.ROOT_TARGET }}

      - name: Upload the disk image
        if: startsWith(github.ref, 'refs/tags/') == false || startsWith(inputs.tagname, 'v')
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.DISK_IMG }}
          path: ${{ env.DISK_IMG }}

      - name: Compress image and calculate its hash
        if: startsWith(github.ref, 'refs/tags/')|| startsWith(inputs.tagname, 'v')
        run: |
          xz ${{ env.DISK_IMG }}
          sha512sum ${{ env.DISK_IMG }}.xz > ${{ env.DISK_IMG }}.xz.sha512

      - name: Release
        if: startsWith(github.ref, 'refs/tags/') || startsWith(inputs.tagname, 'v')
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ inputs.tagname }}
          files: |
            ${{ env.DISK_IMG }}.xz
            ${{ env.DISK_IMG }}.xz.sha512
