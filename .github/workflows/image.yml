name: CI

on:
  push:
  workflow_dispatch:

jobs:
  build_root:
    runs-on: ubuntu-latest
    env:
      ROOT_TARGET: "target"

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Create a folder as the root taget path
        run: |
          mkdir ${{ env.ROOT_TARGET }}

      - name: Have aarch64 environment
        uses: uraimo/run-on-arch-action@v2
        with:
          arch: aarch64
          distro: alpine_latest
          run: |
            uname -a
            ls -l
            sh bootstrap.sh ${{ env.ROOT_TARGET }}

      - name: Package the built root
        working-directory: ${{ env.ROOT_TARGET }}
        run: |
          sudo tar zcf ../rootfs-aarch64.tar.gz *
          sudo chmod a+r ../rootfs-aarch64.tar.gz

      - name: Upload compressed root file system
        uses: actions/upload-artifact@v2
        with:
          name: rootfs-aarch64.tar.gz
          path: rootfs-aarch64.tar.gz

  build_qemu_image:
    needs: build_root
    runs-on: ubuntu-latest
    env:
      DISK_IMG: "simple-alpine-qemu_aarch64.img"
      ROOTFS_TARBALL: "rootfs-aarch64.tar.gz"
      ROOT_TARGET: "target"
      KERNEL_URL: "https://github.com/starnight/build-kernel/releases/download/v5.18.14-1/kernel-aarch64.tar.gz"
      KERNEL_TARBALL: "kernel-aarch64.tar.gz"
      BOOT_TARGET: "target/boot"

    steps:
      - name: Create a raw disk image
        shell: bash
        run: |
          dd if=/dev/zero of=${{ env.DISK_IMG }} bs=8M count=16
          (echo "start=2048, size=100MiB, type=c, bootable"; echo "type=83") | sfdisk ${{ env.DISK_IMG }}

          # https://github.com/damianperera/mount-image-action/blob/v1/action.yml#L36
          kpartx="$(sudo kpartx -avs ${{ env.DISK_IMG }})" || echo 1>&2 "ERROR: could not create loop devices for image"
          echo $kpartx
          blockDevices=($(grep -o 'loop.p.' <<<"$kpartx"))
          sleep 0.5
          boot=/dev/mapper/${blockDevices[0]}
          root=/dev/mapper/${blockDevices[1]}

          echo "Boot: ${boot}"
          echo "Root: ${root}"

          sudo mkfs.vfat -v ${boot}
          sudo mkfs.ext4 ${root}

          mkdir ${{ env.ROOT_TARGET }}
          sudo mount -t ext4 ${root} ${{ env.ROOT_TARGET }}
          sudo mkdir ${{ env.BOOT_TARGET }}
          sudo mount -t vfat ${boot} ${{ env.BOOT_TARGET }}

      - name: Download the root file system tarball
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.ROOTFS_TARBALL }}

      - name: Deploy the root file system into the root partition
        working-directory: ${{ env.ROOT_TARGET }}
        run: |
          sudo tar zxf ../${{ env.ROOTFS_TARBALL }}

      - name: Download the kernel tarball
        run: |
          curl -L ${{ env.KERNEL_URL }} -o ${{ env.KERNEL_TARBALL }}

      - name: Deploy the kernel into the root file system
        working-directory: ${{ env.ROOT_TARGET }}
        run: |
          sudo tar zxf ../${{ env.KERNEL_TARBALL }}

      - name: Unmount image
        run: |
          ls -l ${{ env.ROOT_TARGET }}
          ls -l ${{ env.BOOT_TARGET }}
          sudo umount ${{ env.BOOT_TARGET }}
          sudo umount ${{ env.ROOT_TARGET }}

      - name: Upload the disk image
        if: startsWith(github.ref, 'refs/tags/') == false
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.DISK_IMG }}
          path: ${{ env.DISK_IMG }}

      - name: Compress image and calculate its hash
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          xz ${{ env.DISK_IMG }}
          sha512sum ${{ env.DISK_IMG }}.xz > ${{ env.DISK_IMG }}.xz.sha512

      - name: Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ env.DISK_IMG }}.xz
            ${{ env.DISK_IMG }}.xz.sha512
